
Hydroponic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000d3a  00000dce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000dce  2**0
                  ALLOC
  3 .stab         000023dc  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00003918  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001236  00000000  00000000  00003a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d9  00000000  00000000  00004c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f1  00000000  00000000  00005347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00005d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003db  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5a  00000000  00000000  0000640f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00007369  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 02 	call	0x482	; 0x482 <main>
  8a:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_ADC>:
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	86 b9       	out	0x06, r24	; 6
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	87 b9       	out	0x07, r24	; 7
  9a:	08 95       	ret

0000009c <readAnalog>:
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	98 7f       	andi	r25, 0xF8	; 248
  a0:	97 b9       	out	0x07, r25	; 7
  a2:	97 b1       	in	r25, 0x07	; 7
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
  a8:	36 9a       	sbi	0x06, 6	; 6
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	84 ff       	sbrs	r24, 4
  ae:	fd cf       	rjmp	.-6      	; 0xaa <readAnalog+0xe>
  b0:	34 9a       	sbi	0x06, 4	; 6
  b2:	24 b1       	in	r18, 0x04	; 4
  b4:	35 b1       	in	r19, 0x05	; 5
  b6:	93 2f       	mov	r25, r19
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	82 0f       	add	r24, r18
  bc:	91 1d       	adc	r25, r1
  be:	08 95       	ret

000000c0 <DHT_Setup>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	93 ed       	ldi	r25, 0xD3	; 211
  c4:	a0 e3       	ldi	r26, 0x30	; 48
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	a0 40       	sbci	r26, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <DHT_Setup+0x6>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <DHT_Setup+0x10>
  d0:	00 00       	nop
//----- Functions -----------------------------//
//Setup sensor. 
void DHT_Setup(void)
{
	_delay_ms(__DHT_Delay_Setup);
	__DHT_STATUS = DHT_Ok;
  d2:	10 92 68 00 	sts	0x0068, r1
}
  d6:	08 95       	ret

000000d8 <DHT_status>:

//Get sensor status. 
enum DHT_Status_t DHT_status(void)
{
	return (__DHT_STATUS);
}
  d8:	80 91 68 00 	lds	r24, 0x0068
  dc:	08 95       	ret

000000de <DHT_ReadRaw>:

//Read raw buffer from sensor. 
void DHT_ReadRaw(uint8_t Data[4])
{
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	00 d0       	rcall	.+0      	; 0xf0 <DHT_ReadRaw+0x12>
  f0:	00 d0       	rcall	.+0      	; 0xf2 <DHT_ReadRaw+0x14>
  f2:	0f 92       	push	r0
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[5] = {0, 0, 0, 0, 0};
  f8:	fe 01       	movw	r30, r28
  fa:	31 96       	adiw	r30, 0x01	; 1
  fc:	25 e0       	ldi	r18, 0x05	; 5
  fe:	df 01       	movw	r26, r30
 100:	1d 92       	st	X+, r1
 102:	2a 95       	dec	r18
 104:	e9 f7       	brne	.-6      	; 0x100 <DHT_ReadRaw+0x22>
	uint8_t retries, i;
	int8_t j;
	__DHT_STATUS = DHT_Ok;
 106:	10 92 68 00 	sts	0x0068, r1

	//----- Step 1 - Start communication -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Request data
		DigitalWrite(DHT_Pin, Low);			//DHT_PIN = 0
 10a:	df 98       	cbi	0x1b, 7	; 27
		PinMode(DHT_Pin, Output);			//DHT_PIN = Output
 10c:	d7 9a       	sbi	0x1a, 7	; 26
 10e:	ef e3       	ldi	r30, 0x3F	; 63
 110:	fc e9       	ldi	r31, 0x9C	; 156
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <DHT_ReadRaw+0x34>
 116:	00 c0       	rjmp	.+0      	; 0x118 <DHT_ReadRaw+0x3a>
 118:	00 00       	nop
		_delay_ms(__DHT_Delay_Read);
		
		//Setup DHT_PIN as input with pull-up resistor so as to read data
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
 11a:	df 9a       	sbi	0x1b, 7	; 27
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input
 11c:	d7 98       	cbi	0x1a, 7	; 26

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
 11e:	29 e2       	ldi	r18, 0x29	; 41
 120:	0a c0       	rjmp	.+20     	; 0x136 <DHT_ReadRaw+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	f5 e0       	ldi	r31, 0x05	; 5
 124:	fa 95       	dec	r31
 126:	f1 f7       	brne	.-4      	; 0x124 <DHT_ReadRaw+0x46>
 128:	00 00       	nop
 12a:	21 50       	subi	r18, 0x01	; 1
		{
			_delay_us(2);
			retries += 2;
			if (retries > 80)
 12c:	21 f4       	brne	.+8      	; 0x136 <DHT_ReadRaw+0x58>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	80 93 68 00 	sts	0x0068, r24
 134:	99 c0       	rjmp	.+306    	; 0x268 <DHT_ReadRaw+0x18a>
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
 136:	cf 99       	sbic	0x19, 7	; 25
 138:	f4 cf       	rjmp	.-24     	; 0x122 <DHT_ReadRaw+0x44>
		}
	}
	//----------------------------------------

	//----- Step 2 - Wait for response -----	
	if (__DHT_STATUS == DHT_Ok)
 13a:	20 91 68 00 	lds	r18, 0x0068
 13e:	22 23       	and	r18, r18
 140:	59 f0       	breq	.+22     	; 0x158 <DHT_ReadRaw+0x7a>
 142:	92 c0       	rjmp	.+292    	; 0x268 <DHT_ReadRaw+0x18a>
 144:	35 e0       	ldi	r19, 0x05	; 5
 146:	3a 95       	dec	r19
 148:	f1 f7       	brne	.-4      	; 0x146 <DHT_ReadRaw+0x68>
 14a:	00 00       	nop
 14c:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while (!DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
 14e:	29 f4       	brne	.+10     	; 0x15a <DHT_ReadRaw+0x7c>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 150:	24 e0       	ldi	r18, 0x04	; 4
 152:	20 93 68 00 	sts	0x0068, r18
				break;
 156:	0e c0       	rjmp	.+28     	; 0x174 <DHT_ReadRaw+0x96>
		}
	}
	//----------------------------------------

	//----- Step 2 - Wait for response -----	
	if (__DHT_STATUS == DHT_Ok)
 158:	23 e3       	ldi	r18, 0x33	; 51
	{
		//Response sequence began
		//Wait for the first response to finish (low for ~80us)
		retries = 0;
		while (!DigitalRead(DHT_Pin))
 15a:	cf 9b       	sbis	0x19, 7	; 25
 15c:	f3 cf       	rjmp	.-26     	; 0x144 <DHT_ReadRaw+0x66>
 15e:	0a c0       	rjmp	.+20     	; 0x174 <DHT_ReadRaw+0x96>
 160:	45 e0       	ldi	r20, 0x05	; 5
 162:	4a 95       	dec	r20
 164:	f1 f7       	brne	.-4      	; 0x162 <DHT_ReadRaw+0x84>
 166:	00 00       	nop
 168:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while(DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
 16a:	29 f4       	brne	.+10     	; 0x176 <DHT_ReadRaw+0x98>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	80 93 68 00 	sts	0x0068, r24
				break;
 172:	7a c0       	rjmp	.+244    	; 0x268 <DHT_ReadRaw+0x18a>
		}
	}
	//----------------------------------------

	//----- Step 2 - Wait for response -----	
	if (__DHT_STATUS == DHT_Ok)
 174:	23 e3       	ldi	r18, 0x33	; 51
				break;
			}
		}
		//Wait for the last response to finish (high for ~80us)
		retries = 0;
		while(DigitalRead(DHT_Pin))
 176:	cf 99       	sbic	0x19, 7	; 25
 178:	f3 cf       	rjmp	.-26     	; 0x160 <DHT_ReadRaw+0x82>
		}
	}
	//--------------------------------------

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
 17a:	20 91 68 00 	lds	r18, 0x0068
 17e:	22 23       	and	r18, r18
 180:	09 f4       	brne	.+2      	; 0x184 <DHT_ReadRaw+0xa6>
 182:	43 c0       	rjmp	.+134    	; 0x20a <DHT_ReadRaw+0x12c>
 184:	71 c0       	rjmp	.+226    	; 0x268 <DHT_ReadRaw+0x18a>
 186:	55 e0       	ldi	r21, 0x05	; 5
 188:	5a 95       	dec	r21
 18a:	f1 f7       	brne	.-4      	; 0x188 <DHT_ReadRaw+0xaa>
 18c:	00 00       	nop
 18e:	41 50       	subi	r20, 0x01	; 1
				retries = 0;
				while(!DigitalRead(DHT_Pin))
				{
					_delay_us(2);
					retries += 2;
					if (retries > 70)
 190:	31 f4       	brne	.+12     	; 0x19e <DHT_ReadRaw+0xc0>
					{
						__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 192:	f0 92 68 00 	sts	0x0068, r15
						j = -1;								//Break inner for-loop
						i = 5;								//Break outer for-loop
 196:	be 2d       	mov	r27, r14
 198:	34 c0       	rjmp	.+104    	; 0x202 <DHT_ReadRaw+0x124>
	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
 19a:	b4 2f       	mov	r27, r20
 19c:	44 e2       	ldi	r20, 0x24	; 36
			{
				//There is always a leading low level of 50 us
				retries = 0;
				while(!DigitalRead(DHT_Pin))
 19e:	cf 9b       	sbis	0x19, 7	; 25
 1a0:	f2 cf       	rjmp	.-28     	; 0x186 <DHT_ReadRaw+0xa8>
						i = 5;								//Break outer for-loop
						break;								//Break while loop
					}
				}

				if (__DHT_STATUS == DHT_Ok)
 1a2:	40 91 68 00 	lds	r20, 0x0068
 1a6:	44 23       	and	r20, r20
 1a8:	49 f5       	brne	.+82     	; 0x1fc <DHT_ReadRaw+0x11e>
 1aa:	ed e5       	ldi	r30, 0x5D	; 93
 1ac:	ea 95       	dec	r30
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <DHT_ReadRaw+0xce>
 1b0:	00 00       	nop
				{
					//We read data bit || 26-28us means '0' || 70us means '1'
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
 1b2:	cf 9b       	sbis	0x19, 7	; 25
 1b4:	1e c0       	rjmp	.+60     	; 0x1f2 <DHT_ReadRaw+0x114>
						BitSet(buffer[i], j);				//bit = '1'
 1b6:	e1 e0       	ldi	r30, 0x01	; 1
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ec 0f       	add	r30, r28
 1bc:	fd 1f       	adc	r31, r29
 1be:	eb 0f       	add	r30, r27
 1c0:	f1 1d       	adc	r31, r1
 1c2:	b9 01       	movw	r22, r18
 1c4:	a8 01       	movw	r20, r16
 1c6:	0a 2e       	mov	r0, r26
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <DHT_ReadRaw+0xf4>
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	66 1f       	adc	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	0a 94       	dec	r0
 1d4:	d2 f7       	brpl	.-12     	; 0x1ca <DHT_ReadRaw+0xec>
 1d6:	d0 80       	ld	r13, Z
 1d8:	4d 29       	or	r20, r13
 1da:	40 83       	st	Z, r20
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <DHT_ReadRaw+0x114>
 1de:	f5 e0       	ldi	r31, 0x05	; 5
 1e0:	fa 95       	dec	r31
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <DHT_ReadRaw+0x102>
 1e4:	00 00       	nop
 1e6:	41 50       	subi	r20, 0x01	; 1
					retries = 0;
					while(DigitalRead(DHT_Pin))
					{
						_delay_us(2);
						retries += 2;
						if (retries > 100)
 1e8:	29 f4       	brne	.+10     	; 0x1f4 <DHT_ReadRaw+0x116>
						{
							__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 1ea:	f0 92 68 00 	sts	0x0068, r15
							break;
 1ee:	4b 2f       	mov	r20, r27
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <DHT_ReadRaw+0x120>
	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
 1f2:	43 e3       	ldi	r20, 0x33	; 51
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
						BitSet(buffer[i], j);				//bit = '1'

					retries = 0;
					while(DigitalRead(DHT_Pin))
 1f4:	cf 99       	sbic	0x19, 7	; 25
 1f6:	f3 cf       	rjmp	.-26     	; 0x1de <DHT_ReadRaw+0x100>
 1f8:	4b 2f       	mov	r20, r27
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <DHT_ReadRaw+0x120>
						i = 5;								//Break outer for-loop
						break;								//Break while loop
					}
				}

				if (__DHT_STATUS == DHT_Ok)
 1fc:	4b 2f       	mov	r20, r27
	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
 1fe:	a1 50       	subi	r26, 0x01	; 1
 200:	62 f6       	brpl	.-104    	; 0x19a <DHT_ReadRaw+0xbc>

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
 202:	bf 5f       	subi	r27, 0xFF	; 255
 204:	b5 30       	cpi	r27, 0x05	; 5
 206:	88 f0       	brcs	.+34     	; 0x22a <DHT_ReadRaw+0x14c>
 208:	12 c0       	rjmp	.+36     	; 0x22e <DHT_ReadRaw+0x150>
		}
	}
	//--------------------------------------

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
 20a:	b0 e0       	ldi	r27, 0x00	; 0
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
 20c:	0f 2e       	mov	r0, r31
 20e:	f7 e0       	ldi	r31, 0x07	; 7
 210:	cf 2e       	mov	r12, r31
 212:	f0 2d       	mov	r31, r0
				if (__DHT_STATUS == DHT_Ok)
				{
					//We read data bit || 26-28us means '0' || 70us means '1'
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
						BitSet(buffer[i], j);				//bit = '1'
 214:	01 e0       	ldi	r16, 0x01	; 1
 216:	10 e0       	ldi	r17, 0x00	; 0
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 e0       	ldi	r19, 0x00	; 0
					{
						_delay_us(2);
						retries += 2;
						if (retries > 100)
						{
							__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 21c:	ff 24       	eor	r15, r15
 21e:	68 94       	set
 220:	f2 f8       	bld	r15, 2
					retries += 2;
					if (retries > 70)
					{
						__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
						j = -1;								//Break inner for-loop
						i = 5;								//Break outer for-loop
 222:	0f 2e       	mov	r0, r31
 224:	f5 e0       	ldi	r31, 0x05	; 5
 226:	ef 2e       	mov	r14, r31
 228:	f0 2d       	mov	r31, r0
	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
 22a:	ac 2d       	mov	r26, r12
 22c:	b7 cf       	rjmp	.-146    	; 0x19c <DHT_ReadRaw+0xbe>
	}
	//--------------------------------------


	//----- Step 4 - Check checksum and return data -----
	if (__DHT_STATUS == DHT_Ok)
 22e:	20 91 68 00 	lds	r18, 0x0068
 232:	22 23       	and	r18, r18
 234:	c9 f4       	brne	.+50     	; 0x268 <DHT_ReadRaw+0x18a>
	{	
		if (((uint8_t)(buffer[0] + buffer[1] + buffer[2] + buffer[3])) != buffer[4])
 236:	3a 81       	ldd	r19, Y+2	; 0x02
 238:	29 81       	ldd	r18, Y+1	; 0x01
 23a:	32 0f       	add	r19, r18
 23c:	2b 81       	ldd	r18, Y+3	; 0x03
 23e:	32 0f       	add	r19, r18
 240:	2c 81       	ldd	r18, Y+4	; 0x04
 242:	32 0f       	add	r19, r18
 244:	2d 81       	ldd	r18, Y+5	; 0x05
 246:	32 17       	cp	r19, r18
 248:	21 f0       	breq	.+8      	; 0x252 <DHT_ReadRaw+0x174>
		{
			__DHT_STATUS = DHT_Error_Checksum;	//Checksum error
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	80 93 68 00 	sts	0x0068, r24
 250:	0b c0       	rjmp	.+22     	; 0x268 <DHT_ReadRaw+0x18a>
 252:	de 01       	movw	r26, r28
 254:	11 96       	adiw	r26, 0x01	; 1
 256:	e8 2f       	mov	r30, r24
 258:	f9 2f       	mov	r31, r25
{
	return (__DHT_STATUS);
}

//Read raw buffer from sensor. 
void DHT_ReadRaw(uint8_t Data[4])
 25a:	ce 01       	movw	r24, r28
 25c:	05 96       	adiw	r24, 0x05	; 5
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
				Data[i] = buffer[i];
 25e:	2d 91       	ld	r18, X+
 260:	21 93       	st	Z+, r18
			//data[0] = Humidity		(int)
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
 262:	a8 17       	cp	r26, r24
 264:	b9 07       	cpc	r27, r25
 266:	d9 f7       	brne	.-10     	; 0x25e <DHT_ReadRaw+0x180>
				Data[i] = buffer[i];
		}
	}
	//---------------------------------------------------
}
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	08 95       	ret

00000284 <DHT_Read>:
	DHT_Read(waste, Humidity);
}

//Read temperature and humidity. 
void DHT_Read(double *Temperature, double *Humidity)
{
 284:	af 92       	push	r10
 286:	bf 92       	push	r11
 288:	cf 92       	push	r12
 28a:	df 92       	push	r13
 28c:	ef 92       	push	r14
 28e:	ff 92       	push	r15
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 d0       	rcall	.+0      	; 0x29a <DHT_Read+0x16>
 29a:	00 d0       	rcall	.+0      	; 0x29c <DHT_Read+0x18>
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	6c 01       	movw	r12, r24
 2a2:	7b 01       	movw	r14, r22
	uint8_t data[4] = {0, 0, 0, 0};
 2a4:	19 82       	std	Y+1, r1	; 0x01
 2a6:	1a 82       	std	Y+2, r1	; 0x02
 2a8:	1b 82       	std	Y+3, r1	; 0x03
 2aa:	1c 82       	std	Y+4, r1	; 0x04

	//Read data
	DHT_ReadRaw(data);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 6f 00 	call	0xde	; 0xde <DHT_ReadRaw>
	
	//If read successfully
	if (__DHT_STATUS == DHT_Ok)
 2b4:	80 91 68 00 	lds	r24, 0x0068
 2b8:	88 23       	and	r24, r24
 2ba:	09 f0       	breq	.+2      	; 0x2be <DHT_Read+0x3a>
 2bc:	8f c0       	rjmp	.+286    	; 0x3dc <DHT_Read+0x158>
	{	
		//Calculate values
		*Temperature = DataToTemp(data[2], data[3]);
 2be:	2b 81       	ldd	r18, Y+3	; 0x03
 2c0:	6c 81       	ldd	r22, Y+4	; 0x04
	
	#if (DHT_Type == DHT11)
		temp = Data2;
	#elif (DHT_Type == DHT22)
		//(Integral<<8 + Decimal) / 10
		temp = (BitCheck(Data2, 7) ? ((((Data2 & 0x7F) << 8) | Data3) / (-10.0)) : (((Data2 << 8) | Data3) / 10.0));
 2c2:	22 23       	and	r18, r18
 2c4:	ac f4       	brge	.+42     	; 0x2f0 <DHT_Read+0x6c>
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	2f 77       	andi	r18, 0x7F	; 127
 2ca:	30 70       	andi	r19, 0x00	; 0
 2cc:	32 2f       	mov	r19, r18
 2ce:	22 27       	eor	r18, r18
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	62 2b       	or	r22, r18
 2d4:	73 2b       	or	r23, r19
 2d6:	88 27       	eor	r24, r24
 2d8:	77 fd       	sbrc	r23, 7
 2da:	80 95       	com	r24
 2dc:	98 2f       	mov	r25, r24
 2de:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatsisf>
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	40 e2       	ldi	r20, 0x20	; 32
 2e8:	51 ec       	ldi	r21, 0xC1	; 193
 2ea:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__divsf3>
 2ee:	11 c0       	rjmp	.+34     	; 0x312 <DHT_Read+0x8e>
 2f0:	92 2f       	mov	r25, r18
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	68 2b       	or	r22, r24
 2f8:	79 2b       	or	r23, r25
 2fa:	88 27       	eor	r24, r24
 2fc:	77 fd       	sbrc	r23, 7
 2fe:	80 95       	com	r24
 300:	98 2f       	mov	r25, r24
 302:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatsisf>
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e2       	ldi	r20, 0x20	; 32
 30c:	51 e4       	ldi	r21, 0x41	; 65
 30e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__divsf3>
	
	//If read successfully
	if (__DHT_STATUS == DHT_Ok)
	{	
		//Calculate values
		*Temperature = DataToTemp(data[2], data[3]);
 312:	38 2f       	mov	r19, r24
 314:	29 2f       	mov	r18, r25
 316:	86 2f       	mov	r24, r22
 318:	97 2f       	mov	r25, r23
 31a:	a3 2f       	mov	r26, r19
 31c:	b2 2f       	mov	r27, r18
 31e:	f6 01       	movw	r30, r12
 320:	80 83       	st	Z, r24
 322:	91 83       	std	Z+1, r25	; 0x01
 324:	a2 83       	std	Z+2, r26	; 0x02
 326:	b3 83       	std	Z+3, r27	; 0x03
	
	#if (DHT_Type == DHT11)
		hum = Data0;
	#elif (DHT_Type == DHT22)
		//(Integral<<8 + Decimal) / 10
		hum = ((Data0<<8) | Data1) / 10.0;
 328:	99 81       	ldd	r25, Y+1	; 0x01
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	6a 81       	ldd	r22, Y+2	; 0x02
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	68 2b       	or	r22, r24
 332:	79 2b       	or	r23, r25
 334:	88 27       	eor	r24, r24
 336:	77 fd       	sbrc	r23, 7
 338:	80 95       	com	r24
 33a:	98 2f       	mov	r25, r24
 33c:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatsisf>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	40 e2       	ldi	r20, 0x20	; 32
 346:	51 e4       	ldi	r21, 0x41	; 65
 348:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__divsf3>
 34c:	16 2f       	mov	r17, r22
 34e:	07 2f       	mov	r16, r23
 350:	b8 2e       	mov	r11, r24
 352:	a9 2e       	mov	r10, r25
	//If read successfully
	if (__DHT_STATUS == DHT_Ok)
	{	
		//Calculate values
		*Temperature = DataToTemp(data[2], data[3]);
		*Humidity = DataToHum(data[0], data[1]);	
 354:	86 2f       	mov	r24, r22
 356:	90 2f       	mov	r25, r16
 358:	ab 2d       	mov	r26, r11
 35a:	ba 2d       	mov	r27, r10
 35c:	f7 01       	movw	r30, r14
 35e:	80 83       	st	Z, r24
 360:	91 83       	std	Z+1, r25	; 0x01
 362:	a2 83       	std	Z+2, r26	; 0x02
 364:	b3 83       	std	Z+3, r27	; 0x03
		
		//Check values
		if ((*Temperature < __DHT_Temperature_Min) || (*Temperature > __DHT_Temperature_Max))
 366:	f6 01       	movw	r30, r12
 368:	c0 80       	ld	r12, Z
 36a:	d1 80       	ldd	r13, Z+1	; 0x01
 36c:	e2 80       	ldd	r14, Z+2	; 0x02
 36e:	f3 80       	ldd	r15, Z+3	; 0x03
 370:	c7 01       	movw	r24, r14
 372:	b6 01       	movw	r22, r12
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	40 e2       	ldi	r20, 0x20	; 32
 37a:	52 ec       	ldi	r21, 0xC2	; 194
 37c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__cmpsf2>
 380:	88 23       	and	r24, r24
 382:	54 f0       	brlt	.+20     	; 0x398 <DHT_Read+0x114>
 384:	c7 01       	movw	r24, r14
 386:	b6 01       	movw	r22, r12
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	40 ea       	ldi	r20, 0xA0	; 160
 38e:	52 e4       	ldi	r21, 0x42	; 66
 390:	0e 94 34 06 	call	0xc68	; 0xc68 <__gesf2>
 394:	18 16       	cp	r1, r24
 396:	24 f4       	brge	.+8      	; 0x3a0 <DHT_Read+0x11c>
			__DHT_STATUS = DHT_Error_Temperature;
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	80 93 68 00 	sts	0x0068, r24
 39e:	1e c0       	rjmp	.+60     	; 0x3dc <DHT_Read+0x158>
		else if ((*Humidity < __DHT_Humidity_Min) || (*Humidity > __DHT_Humidity_Max))
 3a0:	81 2f       	mov	r24, r17
 3a2:	90 2f       	mov	r25, r16
 3a4:	ab 2d       	mov	r26, r11
 3a6:	ba 2d       	mov	r27, r10
 3a8:	bc 01       	movw	r22, r24
 3aa:	cd 01       	movw	r24, r26
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	a9 01       	movw	r20, r18
 3b2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__cmpsf2>
 3b6:	88 23       	and	r24, r24
 3b8:	74 f0       	brlt	.+28     	; 0x3d6 <DHT_Read+0x152>
 3ba:	81 2f       	mov	r24, r17
 3bc:	90 2f       	mov	r25, r16
 3be:	ab 2d       	mov	r26, r11
 3c0:	ba 2d       	mov	r27, r10
 3c2:	bc 01       	movw	r22, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	48 ec       	ldi	r20, 0xC8	; 200
 3cc:	52 e4       	ldi	r21, 0x42	; 66
 3ce:	0e 94 34 06 	call	0xc68	; 0xc68 <__gesf2>
 3d2:	18 16       	cp	r1, r24
 3d4:	1c f4       	brge	.+6      	; 0x3dc <DHT_Read+0x158>
			__DHT_STATUS = DHT_Error_Humidity;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 68 00 	sts	0x0068, r24
	}
}
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	ef 90       	pop	r14
 3f0:	df 90       	pop	r13
 3f2:	cf 90       	pop	r12
 3f4:	bf 90       	pop	r11
 3f6:	af 90       	pop	r10
 3f8:	08 95       	ret

000003fa <DHT_ReadHumidity>:
	DHT_Read(Temperature, waste);
}

//Read humidity percentage. 
void DHT_ReadHumidity(double *Humidity)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	00 d0       	rcall	.+0      	; 0x400 <DHT_ReadHumidity+0x6>
 400:	00 d0       	rcall	.+0      	; 0x402 <DHT_ReadHumidity+0x8>
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	bc 01       	movw	r22, r24
	double waste[1];
	DHT_Read(waste, Humidity);
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	0e 94 42 01 	call	0x284	; 0x284 <DHT_Read>
}
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <DHT_ReadTemperature>:
	//---------------------------------------------------
}

//Read temperature in Celsius. 
void DHT_ReadTemperature(double *Temperature)
{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	00 d0       	rcall	.+0      	; 0x424 <DHT_ReadTemperature+0x6>
 424:	00 d0       	rcall	.+0      	; 0x426 <DHT_ReadTemperature+0x8>
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
	double waste[1];
	DHT_Read(Temperature, waste);
 42a:	be 01       	movw	r22, r28
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	0e 94 42 01 	call	0x284	; 0x284 <DHT_Read>
}
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <DHT_ConvertToFahrenheit>:
}

//Convert temperature from Celsius to Fahrenheit. 
double DHT_ConvertToFahrenheit(double Temperature)
{
	return (Temperature * 1.8 + 32);
 442:	26 e6       	ldi	r18, 0x66	; 102
 444:	36 e6       	ldi	r19, 0x66	; 102
 446:	46 ee       	ldi	r20, 0xE6	; 230
 448:	5f e3       	ldi	r21, 0x3F	; 63
 44a:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	52 e4       	ldi	r21, 0x42	; 66
 456:	0e 94 86 04 	call	0x90c	; 0x90c <__addsf3>
}
 45a:	46 2f       	mov	r20, r22
 45c:	57 2f       	mov	r21, r23
 45e:	68 2f       	mov	r22, r24
 460:	79 2f       	mov	r23, r25
 462:	cb 01       	movw	r24, r22
 464:	ba 01       	movw	r22, r20
 466:	08 95       	ret

00000468 <DHT_ConvertToKelvin>:

//Convert temperature from Celsius to Kelvin.
double DHT_ConvertToKelvin(double Temperature)
{
	return (Temperature + 273.15);
 468:	23 e3       	ldi	r18, 0x33	; 51
 46a:	33 e9       	ldi	r19, 0x93	; 147
 46c:	48 e8       	ldi	r20, 0x88	; 136
 46e:	53 e4       	ldi	r21, 0x43	; 67
 470:	0e 94 86 04 	call	0x90c	; 0x90c <__addsf3>
}
 474:	46 2f       	mov	r20, r22
 476:	57 2f       	mov	r21, r23
 478:	68 2f       	mov	r22, r24
 47a:	79 2f       	mov	r23, r25
 47c:	cb 01       	movw	r24, r22
 47e:	ba 01       	movw	r22, r20
 480:	08 95       	ret

00000482 <main>:
#include "stdmacros.h"
#include "servo.h"
#include "pump.h"
#include "DHT.h"
int main(void)
{
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	2a 97       	sbiw	r28, 0x0a	; 10
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
	double temp;
	double hum;
	
	DDRD|=(1<<PD4)|(1<<PD5);
 496:	81 b3       	in	r24, 0x11	; 17
 498:	80 63       	ori	r24, 0x30	; 48
 49a:	81 bb       	out	0x11, r24	; 17
	
	servosHandle servos;
	init_servos(&servos);
 49c:	ce 01       	movw	r24, r28
 49e:	09 96       	adiw	r24, 0x09	; 9
 4a0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <init_servos>
	

	DHT_Setup();
 4a4:	0e 94 60 00 	call	0xc0	; 0xc0 <DHT_Setup>
    while(1)
    {
		DHT_Read(&temp, &hum);
 4a8:	ce 01       	movw	r24, r28
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	be 01       	movw	r22, r28
 4ae:	6b 5f       	subi	r22, 0xFB	; 251
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	0e 94 42 01 	call	0x284	; 0x284 <DHT_Read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	93 ed       	ldi	r25, 0xD3	; 211
 4ba:	a0 e3       	ldi	r26, 0x30	; 48
 4bc:	81 50       	subi	r24, 0x01	; 1
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	a0 40       	sbci	r26, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <main+0x3a>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0x44>
 4c6:	00 00       	nop
 4c8:	ef cf       	rjmp	.-34     	; 0x4a8 <main+0x26>

000004ca <ideal_slope>:
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e8       	ldi	r19, 0x80	; 128
 4ce:	48 e8       	ldi	r20, 0x88	; 136
 4d0:	53 e4       	ldi	r21, 0x43	; 67
 4d2:	0e 94 86 04 	call	0x90c	; 0x90c <__addsf3>
 4d6:	28 ec       	ldi	r18, 0xC8	; 200
 4d8:	37 e0       	ldi	r19, 0x07	; 7
 4da:	45 e0       	ldi	r20, 0x05	; 5
 4dc:	51 e4       	ldi	r21, 0x41	; 65
 4de:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 4e2:	2c ec       	ldi	r18, 0xCC	; 204
 4e4:	3d e5       	ldi	r19, 0x5D	; 93
 4e6:	43 e1       	ldi	r20, 0x13	; 19
 4e8:	50 e4       	ldi	r21, 0x40	; 64
 4ea:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 4ee:	20 e8       	ldi	r18, 0x80	; 128
 4f0:	32 e7       	ldi	r19, 0x72	; 114
 4f2:	4c eb       	ldi	r20, 0xBC	; 188
 4f4:	57 e4       	ldi	r21, 0x47	; 71
 4f6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__divsf3>
 4fa:	46 2f       	mov	r20, r22
 4fc:	57 2f       	mov	r21, r23
 4fe:	68 2f       	mov	r22, r24
 500:	79 2f       	mov	r23, r25
 502:	cb 01       	movw	r24, r22
 504:	ba 01       	movw	r22, r20
 506:	08 95       	ret

00000508 <calibrate_ph>:
 508:	4f 92       	push	r4
 50a:	5f 92       	push	r5
 50c:	6f 92       	push	r6
 50e:	7f 92       	push	r7
 510:	8f 92       	push	r8
 512:	9f 92       	push	r9
 514:	af 92       	push	r10
 516:	bf 92       	push	r11
 518:	cf 92       	push	r12
 51a:	df 92       	push	r13
 51c:	ef 92       	push	r14
 51e:	ff 92       	push	r15
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	28 97       	sbiw	r28, 0x08	; 8
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	6d 83       	std	Y+5, r22	; 0x05
 53a:	7e 83       	std	Y+6, r23	; 0x06
 53c:	8f 83       	std	Y+7, r24	; 0x07
 53e:	98 87       	std	Y+8, r25	; 0x08
 540:	29 83       	std	Y+1, r18	; 0x01
 542:	3a 83       	std	Y+2, r19	; 0x02
 544:	4b 83       	std	Y+3, r20	; 0x03
 546:	5c 83       	std	Y+4, r21	; 0x04
 548:	27 01       	movw	r4, r14
 54a:	38 01       	movw	r6, r16
 54c:	76 01       	movw	r14, r12
 54e:	65 01       	movw	r12, r10
 550:	c3 01       	movw	r24, r6
 552:	b2 01       	movw	r22, r4
 554:	2b 8d       	ldd	r18, Y+27	; 0x1b
 556:	3c 8d       	ldd	r19, Y+28	; 0x1c
 558:	4d 8d       	ldd	r20, Y+29	; 0x1d
 55a:	5e 8d       	ldd	r21, Y+30	; 0x1e
 55c:	0e 94 85 04 	call	0x90a	; 0x90a <__subsf3>
 560:	4b 01       	movw	r8, r22
 562:	5c 01       	movw	r10, r24
 564:	c7 01       	movw	r24, r14
 566:	b6 01       	movw	r22, r12
 568:	29 81       	ldd	r18, Y+1	; 0x01
 56a:	3a 81       	ldd	r19, Y+2	; 0x02
 56c:	4b 81       	ldd	r20, Y+3	; 0x03
 56e:	5c 81       	ldd	r21, Y+4	; 0x04
 570:	0e 94 85 04 	call	0x90a	; 0x90a <__subsf3>
 574:	9b 01       	movw	r18, r22
 576:	ac 01       	movw	r20, r24
 578:	c5 01       	movw	r24, r10
 57a:	b4 01       	movw	r22, r8
 57c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__divsf3>
 580:	16 2f       	mov	r17, r22
 582:	07 2f       	mov	r16, r23
 584:	b8 2e       	mov	r11, r24
 586:	a9 2e       	mov	r10, r25
 588:	6d 81       	ldd	r22, Y+5	; 0x05
 58a:	7e 81       	ldd	r23, Y+6	; 0x06
 58c:	8f 81       	ldd	r24, Y+7	; 0x07
 58e:	98 85       	ldd	r25, Y+8	; 0x08
 590:	0e 94 65 02 	call	0x4ca	; 0x4ca <ideal_slope>
 594:	6b 01       	movw	r12, r22
 596:	7c 01       	movw	r14, r24
 598:	81 2f       	mov	r24, r17
 59a:	90 2f       	mov	r25, r16
 59c:	ab 2d       	mov	r26, r11
 59e:	ba 2d       	mov	r27, r10
 5a0:	bc 01       	movw	r22, r24
 5a2:	cd 01       	movw	r24, r26
 5a4:	a7 01       	movw	r20, r14
 5a6:	96 01       	movw	r18, r12
 5a8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__divsf3>
 5ac:	f6 2f       	mov	r31, r22
 5ae:	e7 2f       	mov	r30, r23
 5b0:	38 2f       	mov	r19, r24
 5b2:	29 2f       	mov	r18, r25
 5b4:	98 2f       	mov	r25, r24
 5b6:	4f 2f       	mov	r20, r31
 5b8:	5e 2f       	mov	r21, r30
 5ba:	69 2f       	mov	r22, r25
 5bc:	72 2f       	mov	r23, r18
 5be:	40 93 60 00 	sts	0x0060, r20
 5c2:	50 93 61 00 	sts	0x0061, r21
 5c6:	60 93 62 00 	sts	0x0062, r22
 5ca:	70 93 63 00 	sts	0x0063, r23
 5ce:	c7 01       	movw	r24, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	42 2f       	mov	r20, r18
 5d4:	0f 2f       	mov	r16, r31
 5d6:	1e 2f       	mov	r17, r30
 5d8:	23 2f       	mov	r18, r19
 5da:	34 2f       	mov	r19, r20
 5dc:	a9 01       	movw	r20, r18
 5de:	98 01       	movw	r18, r16
 5e0:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 5e4:	6b 01       	movw	r12, r22
 5e6:	7c 01       	movw	r14, r24
 5e8:	69 81       	ldd	r22, Y+1	; 0x01
 5ea:	7a 81       	ldd	r23, Y+2	; 0x02
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	9c 81       	ldd	r25, Y+4	; 0x04
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 ee       	ldi	r20, 0xE0	; 224
 5f6:	50 e4       	ldi	r21, 0x40	; 64
 5f8:	0e 94 85 04 	call	0x90a	; 0x90a <__subsf3>
 5fc:	9b 01       	movw	r18, r22
 5fe:	ac 01       	movw	r20, r24
 600:	c7 01       	movw	r24, r14
 602:	b6 01       	movw	r22, r12
 604:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 608:	9b 01       	movw	r18, r22
 60a:	ac 01       	movw	r20, r24
 60c:	c3 01       	movw	r24, r6
 60e:	b2 01       	movw	r22, r4
 610:	0e 94 86 04 	call	0x90c	; 0x90c <__addsf3>
 614:	dc 01       	movw	r26, r24
 616:	cb 01       	movw	r24, r22
 618:	80 93 64 00 	sts	0x0064, r24
 61c:	90 93 65 00 	sts	0x0065, r25
 620:	a0 93 66 00 	sts	0x0066, r26
 624:	b0 93 67 00 	sts	0x0067, r27
 628:	28 96       	adiw	r28, 0x08	; 8
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	ff 90       	pop	r15
 63e:	ef 90       	pop	r14
 640:	df 90       	pop	r13
 642:	cf 90       	pop	r12
 644:	bf 90       	pop	r11
 646:	af 90       	pop	r10
 648:	9f 90       	pop	r9
 64a:	8f 90       	pop	r8
 64c:	7f 90       	pop	r7
 64e:	6f 90       	pop	r6
 650:	5f 90       	pop	r5
 652:	4f 90       	pop	r4
 654:	08 95       	ret

00000656 <get_ph>:
 656:	8f 92       	push	r8
 658:	9f 92       	push	r9
 65a:	af 92       	push	r10
 65c:	bf 92       	push	r11
 65e:	cf 92       	push	r12
 660:	df 92       	push	r13
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	6b 01       	movw	r12, r22
 670:	7c 01       	movw	r14, r24
 672:	80 90 60 00 	lds	r8, 0x0060
 676:	90 90 61 00 	lds	r9, 0x0061
 67a:	a0 90 62 00 	lds	r10, 0x0062
 67e:	b0 90 63 00 	lds	r11, 0x0063
 682:	60 91 64 00 	lds	r22, 0x0064
 686:	70 91 65 00 	lds	r23, 0x0065
 68a:	80 91 66 00 	lds	r24, 0x0066
 68e:	90 91 67 00 	lds	r25, 0x0067
 692:	0e 94 85 04 	call	0x90a	; 0x90a <__subsf3>
 696:	d6 2f       	mov	r29, r22
 698:	c7 2f       	mov	r28, r23
 69a:	18 2f       	mov	r17, r24
 69c:	09 2f       	mov	r16, r25
 69e:	c7 01       	movw	r24, r14
 6a0:	b6 01       	movw	r22, r12
 6a2:	0e 94 65 02 	call	0x4ca	; 0x4ca <ideal_slope>
 6a6:	9b 01       	movw	r18, r22
 6a8:	ac 01       	movw	r20, r24
 6aa:	c5 01       	movw	r24, r10
 6ac:	b4 01       	movw	r22, r8
 6ae:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 6b2:	9b 01       	movw	r18, r22
 6b4:	ac 01       	movw	r20, r24
 6b6:	8d 2f       	mov	r24, r29
 6b8:	9c 2f       	mov	r25, r28
 6ba:	a1 2f       	mov	r26, r17
 6bc:	b0 2f       	mov	r27, r16
 6be:	bc 01       	movw	r22, r24
 6c0:	cd 01       	movw	r24, r26
 6c2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__divsf3>
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	40 ee       	ldi	r20, 0xE0	; 224
 6cc:	50 e4       	ldi	r21, 0x40	; 64
 6ce:	0e 94 86 04 	call	0x90c	; 0x90c <__addsf3>
 6d2:	46 2f       	mov	r20, r22
 6d4:	57 2f       	mov	r21, r23
 6d6:	68 2f       	mov	r22, r24
 6d8:	79 2f       	mov	r23, r25
 6da:	cb 01       	movw	r24, r22
 6dc:	ba 01       	movw	r22, r20
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	bf 90       	pop	r11
 6f0:	af 90       	pop	r10
 6f2:	9f 90       	pop	r9
 6f4:	8f 90       	pop	r8
 6f6:	08 95       	ret

000006f8 <init_pumps>:
#include "pump.h"
//initialize stepper and set dir and step pins to outputs
uint8_t init_pumps()
{	
	//setting the direction and step pins as outputs
	PinMode(pumpPhPlus_StepPin, Output);
 6f8:	b8 9a       	sbi	0x17, 0	; 23
	PinMode(pumpPhMinus_StepPin, Output);
 6fa:	b9 9a       	sbi	0x17, 1	; 23
	PinMode(pumpNutrients_StepPin, Output);
 6fc:	ba 9a       	sbi	0x17, 2	; 23
	return 1;
}
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	08 95       	ret

00000702 <pump_volume>:
	
	return 1;
}
//volume in ML incriments!!!!!!
uint8_t pump_volume(pump_identifier x, uint16_t volume)
{
 702:	cf 93       	push	r28
 704:	c8 2f       	mov	r28, r24
	step_stepper(x, volume * STEP_PER_ML);
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 82 05 	call	0xb04	; 0xb04 <__floatunsisf>
 70e:	20 e0       	ldi	r18, 0x00	; 0
 710:	30 e4       	ldi	r19, 0x40	; 64
 712:	43 e8       	ldi	r20, 0x83	; 131
 714:	54 e4       	ldi	r21, 0x44	; 68
 716:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 71a:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
	return 1;
}
//step the required number of steps while accounting for micro stepping 
static uint8_t step_stepper(pump_identifier x, uint16_t steps)
{
	switch (x)
 71e:	c1 30       	cpi	r28, 0x01	; 1
 720:	79 f0       	breq	.+30     	; 0x740 <pump_volume+0x3e>
 722:	c1 30       	cpi	r28, 0x01	; 1
 724:	b8 f0       	brcs	.+46     	; 0x754 <pump_volume+0x52>
 726:	c2 30       	cpi	r28, 0x02	; 2
 728:	09 f0       	breq	.+2      	; 0x72c <pump_volume+0x2a>
 72a:	5b c0       	rjmp	.+182    	; 0x7e2 <pump_volume+0xe0>
			DigitalWrite(pumpNutrients_StepPin, False);
			_delay_ms(DELAY_PERIOD);
		}
		break;
	case Nutrients:
		for (uint16_t i = 0; i < steps * MICRO_STEP; i++)
 72c:	62 95       	swap	r22
 72e:	72 95       	swap	r23
 730:	70 7f       	andi	r23, 0xF0	; 240
 732:	76 27       	eor	r23, r22
 734:	60 7f       	andi	r22, 0xF0	; 240
 736:	76 27       	eor	r23, r22
 738:	61 15       	cp	r22, r1
 73a:	71 05       	cpc	r23, r1
 73c:	f1 f5       	brne	.+124    	; 0x7ba <pump_volume+0xb8>
 73e:	51 c0       	rjmp	.+162    	; 0x7e2 <pump_volume+0xe0>
			_delay_ms(DELAY_PERIOD);
		}
		break;
		
	case PH_Minus:
		for (uint16_t i = 0; i < steps * MICRO_STEP; i++)
 740:	62 95       	swap	r22
 742:	72 95       	swap	r23
 744:	70 7f       	andi	r23, 0xF0	; 240
 746:	76 27       	eor	r23, r22
 748:	60 7f       	andi	r22, 0xF0	; 240
 74a:	76 27       	eor	r23, r22
 74c:	61 15       	cp	r22, r1
 74e:	71 05       	cpc	r23, r1
 750:	f9 f4       	brne	.+62     	; 0x790 <pump_volume+0x8e>
 752:	47 c0       	rjmp	.+142    	; 0x7e2 <pump_volume+0xe0>
static uint8_t step_stepper(pump_identifier x, uint16_t steps)
{
	switch (x)
	{
	case PH_Plus: 
		for (uint16_t i = 0; i < steps * MICRO_STEP; i++)
 754:	62 95       	swap	r22
 756:	72 95       	swap	r23
 758:	70 7f       	andi	r23, 0xF0	; 240
 75a:	76 27       	eor	r23, r22
 75c:	60 7f       	andi	r22, 0xF0	; 240
 75e:	76 27       	eor	r23, r22
 760:	61 15       	cp	r22, r1
 762:	71 05       	cpc	r23, r1
 764:	f1 f1       	breq	.+124    	; 0x7e2 <pump_volume+0xe0>
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	90 e0       	ldi	r25, 0x00	; 0
		{
			DigitalWrite(pumpPhPlus_StepPin, True);
 76a:	c0 9a       	sbi	0x18, 0	; 24
 76c:	e0 e7       	ldi	r30, 0x70	; 112
 76e:	f2 e0       	ldi	r31, 0x02	; 2
 770:	31 97       	sbiw	r30, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <pump_volume+0x6e>
 774:	00 c0       	rjmp	.+0      	; 0x776 <pump_volume+0x74>
 776:	00 00       	nop
			_delay_ms(DELAY_PERIOD);
			DigitalWrite(pumpPhPlus_StepPin, False);
 778:	c0 98       	cbi	0x18, 0	; 24
 77a:	e0 e7       	ldi	r30, 0x70	; 112
 77c:	f2 e0       	ldi	r31, 0x02	; 2
 77e:	31 97       	sbiw	r30, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <pump_volume+0x7c>
 782:	00 c0       	rjmp	.+0      	; 0x784 <pump_volume+0x82>
 784:	00 00       	nop
static uint8_t step_stepper(pump_identifier x, uint16_t steps)
{
	switch (x)
	{
	case PH_Plus: 
		for (uint16_t i = 0; i < steps * MICRO_STEP; i++)
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	86 17       	cp	r24, r22
 78a:	97 07       	cpc	r25, r23
 78c:	71 f7       	brne	.-36     	; 0x76a <pump_volume+0x68>
 78e:	29 c0       	rjmp	.+82     	; 0x7e2 <pump_volume+0xe0>
			_delay_ms(DELAY_PERIOD);
		}
		break;
		
	case PH_Minus:
		for (uint16_t i = 0; i < steps * MICRO_STEP; i++)
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
		{
			DigitalWrite(pumpNutrients_StepPin, True);
 794:	c2 9a       	sbi	0x18, 2	; 24
 796:	e0 e7       	ldi	r30, 0x70	; 112
 798:	f2 e0       	ldi	r31, 0x02	; 2
 79a:	31 97       	sbiw	r30, 0x01	; 1
 79c:	f1 f7       	brne	.-4      	; 0x79a <pump_volume+0x98>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <pump_volume+0x9e>
 7a0:	00 00       	nop
			_delay_ms(DELAY_PERIOD);
			DigitalWrite(pumpNutrients_StepPin, False);
 7a2:	c2 98       	cbi	0x18, 2	; 24
 7a4:	e0 e7       	ldi	r30, 0x70	; 112
 7a6:	f2 e0       	ldi	r31, 0x02	; 2
 7a8:	31 97       	sbiw	r30, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <pump_volume+0xa6>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <pump_volume+0xac>
 7ae:	00 00       	nop
			_delay_ms(DELAY_PERIOD);
		}
		break;
		
	case PH_Minus:
		for (uint16_t i = 0; i < steps * MICRO_STEP; i++)
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	86 17       	cp	r24, r22
 7b4:	97 07       	cpc	r25, r23
 7b6:	71 f7       	brne	.-36     	; 0x794 <pump_volume+0x92>
 7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <pump_volume+0xe0>
			DigitalWrite(pumpNutrients_StepPin, False);
			_delay_ms(DELAY_PERIOD);
		}
		break;
	case Nutrients:
		for (uint16_t i = 0; i < steps * MICRO_STEP; i++)
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e0       	ldi	r25, 0x00	; 0
		{
			DigitalWrite(pumpPhMinus_StepPin, True);
 7be:	c1 9a       	sbi	0x18, 1	; 24
 7c0:	e0 e7       	ldi	r30, 0x70	; 112
 7c2:	f2 e0       	ldi	r31, 0x02	; 2
 7c4:	31 97       	sbiw	r30, 0x01	; 1
 7c6:	f1 f7       	brne	.-4      	; 0x7c4 <pump_volume+0xc2>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <pump_volume+0xc8>
 7ca:	00 00       	nop
			_delay_ms(DELAY_PERIOD);
			DigitalWrite(pumpPhMinus_StepPin, False);
 7cc:	c1 98       	cbi	0x18, 1	; 24
 7ce:	e0 e7       	ldi	r30, 0x70	; 112
 7d0:	f2 e0       	ldi	r31, 0x02	; 2
 7d2:	31 97       	sbiw	r30, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <pump_volume+0xd0>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <pump_volume+0xd6>
 7d8:	00 00       	nop
			DigitalWrite(pumpNutrients_StepPin, False);
			_delay_ms(DELAY_PERIOD);
		}
		break;
	case Nutrients:
		for (uint16_t i = 0; i < steps * MICRO_STEP; i++)
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	86 17       	cp	r24, r22
 7de:	97 07       	cpc	r25, r23
 7e0:	71 f7       	brne	.-36     	; 0x7be <pump_volume+0xbc>
//volume in ML incriments!!!!!!
uint8_t pump_volume(pump_identifier x, uint16_t volume)
{
	step_stepper(x, volume * STEP_PER_ML);
	return 1;
}
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <init_servos>:
 * Created: 08-Dec-18 3:35:09 PM
 *  Author: mohamed
 */ 
#include "servo.h"
int init_servos(servosHandle* servos)
{
 7e8:	fc 01       	movw	r30, r24
	PinMode(servoPh_pin, Output);
 7ea:	8c 9a       	sbi	0x11, 4	; 17
	PinMode(servoEC_pin, Output);
 7ec:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
 7ee:	8e b5       	in	r24, 0x2e	; 46
 7f0:	88 7f       	andi	r24, 0xF8	; 248
 7f2:	8e bd       	out	0x2e, r24	; 46
	//now the frequency is 50 hz with periodic time of 20ms that gives us a resolution of 1000
	//for 0 pos we need a 1ms pulse that is 20,000/20 = 1000 _ 90 degree = 1500 _ 180 = 2000 
	
	OCR1A =  1000;
 7f4:	88 ee       	ldi	r24, 0xE8	; 232
 7f6:	93 e0       	ldi	r25, 0x03	; 3
 7f8:	9b bd       	out	0x2b, r25	; 43
 7fa:	8a bd       	out	0x2a, r24	; 42
	OCR1B =  1000;
 7fc:	99 bd       	out	0x29, r25	; 41
 7fe:	88 bd       	out	0x28, r24	; 40
	
	TCCR1A = 0b10100010; //sets top to ICR1 and N to 8 and mode to fast PWM
 800:	82 ea       	ldi	r24, 0xA2	; 162
 802:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011010;
 804:	8a e1       	ldi	r24, 0x1A	; 26
 806:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 20000;
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	9e e4       	ldi	r25, 0x4E	; 78
 80c:	97 bd       	out	0x27, r25	; 39
 80e:	86 bd       	out	0x26, r24	; 38
	servos->posPh = 0;
 810:	10 82       	st	Z, r1
	servos->posNutrients = 0;
 812:	11 82       	std	Z+1, r1	; 0x01
	return 1;
}
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	08 95       	ret

0000081a <move_servo>:
int move_servo(double pos, servosHandle* servos, servos_identifier x)
{
 81a:	af 92       	push	r10
 81c:	bf 92       	push	r11
 81e:	cf 92       	push	r12
 820:	df 92       	push	r13
 822:	ef 92       	push	r14
 824:	ff 92       	push	r15
 826:	1f 93       	push	r17
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
 82c:	00 d0       	rcall	.+0      	; 0x82e <move_servo+0x14>
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
 832:	6b 01       	movw	r12, r22
 834:	7c 01       	movw	r14, r24
 836:	5a 01       	movw	r10, r20
 838:	12 2f       	mov	r17, r18
	volatile uint16_t temp =999+(pos/180*1000);
 83a:	20 e0       	ldi	r18, 0x00	; 0
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	44 e3       	ldi	r20, 0x34	; 52
 840:	53 e4       	ldi	r21, 0x43	; 67
 842:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__divsf3>
 846:	20 e0       	ldi	r18, 0x00	; 0
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	4a e7       	ldi	r20, 0x7A	; 122
 84c:	54 e4       	ldi	r21, 0x44	; 68
 84e:	0e 94 38 06 	call	0xc70	; 0xc70 <__mulsf3>
 852:	20 e0       	ldi	r18, 0x00	; 0
 854:	30 ec       	ldi	r19, 0xC0	; 192
 856:	49 e7       	ldi	r20, 0x79	; 121
 858:	54 e4       	ldi	r21, 0x44	; 68
 85a:	0e 94 86 04 	call	0x90c	; 0x90c <__addsf3>
 85e:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
 862:	dc 01       	movw	r26, r24
 864:	cb 01       	movw	r24, r22
 866:	9a 83       	std	Y+2, r25	; 0x02
 868:	89 83       	std	Y+1, r24	; 0x01
	if(pos >= 0 && pos <= 180)
 86a:	c7 01       	movw	r24, r14
 86c:	b6 01       	movw	r22, r12
 86e:	20 e0       	ldi	r18, 0x00	; 0
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	a9 01       	movw	r20, r18
 874:	0e 94 34 06 	call	0xc68	; 0xc68 <__gesf2>
 878:	88 23       	and	r24, r24
 87a:	b4 f1       	brlt	.+108    	; 0x8e8 <__stack+0x89>
 87c:	c7 01       	movw	r24, r14
 87e:	b6 01       	movw	r22, r12
 880:	20 e0       	ldi	r18, 0x00	; 0
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	44 e3       	ldi	r20, 0x34	; 52
 886:	53 e4       	ldi	r21, 0x43	; 67
 888:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__cmpsf2>
 88c:	18 16       	cp	r1, r24
 88e:	7c f1       	brlt	.+94     	; 0x8ee <__stack+0x8f>
	{
		
		if(x == Ph)
 890:	11 23       	and	r17, r17
 892:	a9 f4       	brne	.+42     	; 0x8be <__stack+0x5f>
		{
			servos->posPh = pos;
 894:	c7 01       	movw	r24, r14
 896:	b6 01       	movw	r22, r12
 898:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
 89c:	f5 01       	movw	r30, r10
 89e:	60 83       	st	Z, r22
			TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
 8a0:	8e b5       	in	r24, 0x2e	; 46
 8a2:	88 7f       	andi	r24, 0xF8	; 248
 8a4:	8e bd       	out	0x2e, r24	; 46
			TCNT1 = 0;
 8a6:	1d bc       	out	0x2d, r1	; 45
 8a8:	1c bc       	out	0x2c, r1	; 44
			OCR1A = temp;
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	9a 81       	ldd	r25, Y+2	; 0x02
 8ae:	9b bd       	out	0x2b, r25	; 43
 8b0:	8a bd       	out	0x2a, r24	; 42
			TCCR1B |= (1 << CS11);
 8b2:	8e b5       	in	r24, 0x2e	; 46
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
			TCNT1 = 0;
			OCR1B = temp;
			TCCR1B |= (1 << CS11);
		}
		return 1;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	1a c0       	rjmp	.+52     	; 0x8f2 <__stack+0x93>
			OCR1A = temp;
			TCCR1B |= (1 << CS11);
			
		}else
		{
			servos->posNutrients = pos;
 8be:	c7 01       	movw	r24, r14
 8c0:	b6 01       	movw	r22, r12
 8c2:	0e 94 56 05 	call	0xaac	; 0xaac <__fixunssfsi>
 8c6:	f5 01       	movw	r30, r10
 8c8:	61 83       	std	Z+1, r22	; 0x01
			TCCR1B &= ~((1 << CS12) | (1 << CS11) | (1 << CS10));
 8ca:	8e b5       	in	r24, 0x2e	; 46
 8cc:	88 7f       	andi	r24, 0xF8	; 248
 8ce:	8e bd       	out	0x2e, r24	; 46
			TCNT1 = 0;
 8d0:	1d bc       	out	0x2d, r1	; 45
 8d2:	1c bc       	out	0x2c, r1	; 44
			OCR1B = temp;
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	9a 81       	ldd	r25, Y+2	; 0x02
 8d8:	99 bd       	out	0x29, r25	; 41
 8da:	88 bd       	out	0x28, r24	; 40
			TCCR1B |= (1 << CS11);
 8dc:	8e b5       	in	r24, 0x2e	; 46
 8de:	82 60       	ori	r24, 0x02	; 2
 8e0:	8e bd       	out	0x2e, r24	; 46
		}
		return 1;
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__stack+0x93>
	}
	return 0;
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	90 e0       	ldi	r25, 0x00	; 0
}
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	1f 91       	pop	r17
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	df 90       	pop	r13
 902:	cf 90       	pop	r12
 904:	bf 90       	pop	r11
 906:	af 90       	pop	r10
 908:	08 95       	ret

0000090a <__subsf3>:
 90a:	50 58       	subi	r21, 0x80	; 128

0000090c <__addsf3>:
 90c:	bb 27       	eor	r27, r27
 90e:	aa 27       	eor	r26, r26
 910:	0e d0       	rcall	.+28     	; 0x92e <__addsf3x>
 912:	70 c1       	rjmp	.+736    	; 0xbf4 <__fp_round>
 914:	61 d1       	rcall	.+706    	; 0xbd8 <__fp_pscA>
 916:	30 f0       	brcs	.+12     	; 0x924 <__addsf3+0x18>
 918:	66 d1       	rcall	.+716    	; 0xbe6 <__fp_pscB>
 91a:	20 f0       	brcs	.+8      	; 0x924 <__addsf3+0x18>
 91c:	31 f4       	brne	.+12     	; 0x92a <__addsf3+0x1e>
 91e:	9f 3f       	cpi	r25, 0xFF	; 255
 920:	11 f4       	brne	.+4      	; 0x926 <__addsf3+0x1a>
 922:	1e f4       	brtc	.+6      	; 0x92a <__addsf3+0x1e>
 924:	56 c1       	rjmp	.+684    	; 0xbd2 <__fp_nan>
 926:	0e f4       	brtc	.+2      	; 0x92a <__addsf3+0x1e>
 928:	e0 95       	com	r30
 92a:	e7 fb       	bst	r30, 7
 92c:	4c c1       	rjmp	.+664    	; 0xbc6 <__fp_inf>

0000092e <__addsf3x>:
 92e:	e9 2f       	mov	r30, r25
 930:	72 d1       	rcall	.+740    	; 0xc16 <__fp_split3>
 932:	80 f3       	brcs	.-32     	; 0x914 <__addsf3+0x8>
 934:	ba 17       	cp	r27, r26
 936:	62 07       	cpc	r22, r18
 938:	73 07       	cpc	r23, r19
 93a:	84 07       	cpc	r24, r20
 93c:	95 07       	cpc	r25, r21
 93e:	18 f0       	brcs	.+6      	; 0x946 <__addsf3x+0x18>
 940:	71 f4       	brne	.+28     	; 0x95e <__addsf3x+0x30>
 942:	9e f5       	brtc	.+102    	; 0x9aa <__addsf3x+0x7c>
 944:	8a c1       	rjmp	.+788    	; 0xc5a <__fp_zero>
 946:	0e f4       	brtc	.+2      	; 0x94a <__addsf3x+0x1c>
 948:	e0 95       	com	r30
 94a:	0b 2e       	mov	r0, r27
 94c:	ba 2f       	mov	r27, r26
 94e:	a0 2d       	mov	r26, r0
 950:	0b 01       	movw	r0, r22
 952:	b9 01       	movw	r22, r18
 954:	90 01       	movw	r18, r0
 956:	0c 01       	movw	r0, r24
 958:	ca 01       	movw	r24, r20
 95a:	a0 01       	movw	r20, r0
 95c:	11 24       	eor	r1, r1
 95e:	ff 27       	eor	r31, r31
 960:	59 1b       	sub	r21, r25
 962:	99 f0       	breq	.+38     	; 0x98a <__addsf3x+0x5c>
 964:	59 3f       	cpi	r21, 0xF9	; 249
 966:	50 f4       	brcc	.+20     	; 0x97c <__addsf3x+0x4e>
 968:	50 3e       	cpi	r21, 0xE0	; 224
 96a:	68 f1       	brcs	.+90     	; 0x9c6 <__addsf3x+0x98>
 96c:	1a 16       	cp	r1, r26
 96e:	f0 40       	sbci	r31, 0x00	; 0
 970:	a2 2f       	mov	r26, r18
 972:	23 2f       	mov	r18, r19
 974:	34 2f       	mov	r19, r20
 976:	44 27       	eor	r20, r20
 978:	58 5f       	subi	r21, 0xF8	; 248
 97a:	f3 cf       	rjmp	.-26     	; 0x962 <__addsf3x+0x34>
 97c:	46 95       	lsr	r20
 97e:	37 95       	ror	r19
 980:	27 95       	ror	r18
 982:	a7 95       	ror	r26
 984:	f0 40       	sbci	r31, 0x00	; 0
 986:	53 95       	inc	r21
 988:	c9 f7       	brne	.-14     	; 0x97c <__addsf3x+0x4e>
 98a:	7e f4       	brtc	.+30     	; 0x9aa <__addsf3x+0x7c>
 98c:	1f 16       	cp	r1, r31
 98e:	ba 0b       	sbc	r27, r26
 990:	62 0b       	sbc	r22, r18
 992:	73 0b       	sbc	r23, r19
 994:	84 0b       	sbc	r24, r20
 996:	ba f0       	brmi	.+46     	; 0x9c6 <__addsf3x+0x98>
 998:	91 50       	subi	r25, 0x01	; 1
 99a:	a1 f0       	breq	.+40     	; 0x9c4 <__addsf3x+0x96>
 99c:	ff 0f       	add	r31, r31
 99e:	bb 1f       	adc	r27, r27
 9a0:	66 1f       	adc	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	c2 f7       	brpl	.-16     	; 0x998 <__addsf3x+0x6a>
 9a8:	0e c0       	rjmp	.+28     	; 0x9c6 <__addsf3x+0x98>
 9aa:	ba 0f       	add	r27, r26
 9ac:	62 1f       	adc	r22, r18
 9ae:	73 1f       	adc	r23, r19
 9b0:	84 1f       	adc	r24, r20
 9b2:	48 f4       	brcc	.+18     	; 0x9c6 <__addsf3x+0x98>
 9b4:	87 95       	ror	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	b7 95       	ror	r27
 9bc:	f7 95       	ror	r31
 9be:	9e 3f       	cpi	r25, 0xFE	; 254
 9c0:	08 f0       	brcs	.+2      	; 0x9c4 <__addsf3x+0x96>
 9c2:	b3 cf       	rjmp	.-154    	; 0x92a <__addsf3+0x1e>
 9c4:	93 95       	inc	r25
 9c6:	88 0f       	add	r24, r24
 9c8:	08 f0       	brcs	.+2      	; 0x9cc <__addsf3x+0x9e>
 9ca:	99 27       	eor	r25, r25
 9cc:	ee 0f       	add	r30, r30
 9ce:	97 95       	ror	r25
 9d0:	87 95       	ror	r24
 9d2:	08 95       	ret

000009d4 <__cmpsf2>:
 9d4:	d4 d0       	rcall	.+424    	; 0xb7e <__fp_cmp>
 9d6:	08 f4       	brcc	.+2      	; 0x9da <__cmpsf2+0x6>
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	08 95       	ret

000009dc <__divsf3>:
 9dc:	0c d0       	rcall	.+24     	; 0x9f6 <__divsf3x>
 9de:	0a c1       	rjmp	.+532    	; 0xbf4 <__fp_round>
 9e0:	02 d1       	rcall	.+516    	; 0xbe6 <__fp_pscB>
 9e2:	40 f0       	brcs	.+16     	; 0x9f4 <__divsf3+0x18>
 9e4:	f9 d0       	rcall	.+498    	; 0xbd8 <__fp_pscA>
 9e6:	30 f0       	brcs	.+12     	; 0x9f4 <__divsf3+0x18>
 9e8:	21 f4       	brne	.+8      	; 0x9f2 <__divsf3+0x16>
 9ea:	5f 3f       	cpi	r21, 0xFF	; 255
 9ec:	19 f0       	breq	.+6      	; 0x9f4 <__divsf3+0x18>
 9ee:	eb c0       	rjmp	.+470    	; 0xbc6 <__fp_inf>
 9f0:	51 11       	cpse	r21, r1
 9f2:	34 c1       	rjmp	.+616    	; 0xc5c <__fp_szero>
 9f4:	ee c0       	rjmp	.+476    	; 0xbd2 <__fp_nan>

000009f6 <__divsf3x>:
 9f6:	0f d1       	rcall	.+542    	; 0xc16 <__fp_split3>
 9f8:	98 f3       	brcs	.-26     	; 0x9e0 <__divsf3+0x4>

000009fa <__divsf3_pse>:
 9fa:	99 23       	and	r25, r25
 9fc:	c9 f3       	breq	.-14     	; 0x9f0 <__divsf3+0x14>
 9fe:	55 23       	and	r21, r21
 a00:	b1 f3       	breq	.-20     	; 0x9ee <__divsf3+0x12>
 a02:	95 1b       	sub	r25, r21
 a04:	55 0b       	sbc	r21, r21
 a06:	bb 27       	eor	r27, r27
 a08:	aa 27       	eor	r26, r26
 a0a:	62 17       	cp	r22, r18
 a0c:	73 07       	cpc	r23, r19
 a0e:	84 07       	cpc	r24, r20
 a10:	38 f0       	brcs	.+14     	; 0xa20 <__divsf3_pse+0x26>
 a12:	9f 5f       	subi	r25, 0xFF	; 255
 a14:	5f 4f       	sbci	r21, 0xFF	; 255
 a16:	22 0f       	add	r18, r18
 a18:	33 1f       	adc	r19, r19
 a1a:	44 1f       	adc	r20, r20
 a1c:	aa 1f       	adc	r26, r26
 a1e:	a9 f3       	breq	.-22     	; 0xa0a <__divsf3_pse+0x10>
 a20:	33 d0       	rcall	.+102    	; 0xa88 <__divsf3_pse+0x8e>
 a22:	0e 2e       	mov	r0, r30
 a24:	3a f0       	brmi	.+14     	; 0xa34 <__divsf3_pse+0x3a>
 a26:	e0 e8       	ldi	r30, 0x80	; 128
 a28:	30 d0       	rcall	.+96     	; 0xa8a <__divsf3_pse+0x90>
 a2a:	91 50       	subi	r25, 0x01	; 1
 a2c:	50 40       	sbci	r21, 0x00	; 0
 a2e:	e6 95       	lsr	r30
 a30:	00 1c       	adc	r0, r0
 a32:	ca f7       	brpl	.-14     	; 0xa26 <__divsf3_pse+0x2c>
 a34:	29 d0       	rcall	.+82     	; 0xa88 <__divsf3_pse+0x8e>
 a36:	fe 2f       	mov	r31, r30
 a38:	27 d0       	rcall	.+78     	; 0xa88 <__divsf3_pse+0x8e>
 a3a:	66 0f       	add	r22, r22
 a3c:	77 1f       	adc	r23, r23
 a3e:	88 1f       	adc	r24, r24
 a40:	bb 1f       	adc	r27, r27
 a42:	26 17       	cp	r18, r22
 a44:	37 07       	cpc	r19, r23
 a46:	48 07       	cpc	r20, r24
 a48:	ab 07       	cpc	r26, r27
 a4a:	b0 e8       	ldi	r27, 0x80	; 128
 a4c:	09 f0       	breq	.+2      	; 0xa50 <__divsf3_pse+0x56>
 a4e:	bb 0b       	sbc	r27, r27
 a50:	80 2d       	mov	r24, r0
 a52:	bf 01       	movw	r22, r30
 a54:	ff 27       	eor	r31, r31
 a56:	93 58       	subi	r25, 0x83	; 131
 a58:	5f 4f       	sbci	r21, 0xFF	; 255
 a5a:	2a f0       	brmi	.+10     	; 0xa66 <__divsf3_pse+0x6c>
 a5c:	9e 3f       	cpi	r25, 0xFE	; 254
 a5e:	51 05       	cpc	r21, r1
 a60:	68 f0       	brcs	.+26     	; 0xa7c <__divsf3_pse+0x82>
 a62:	b1 c0       	rjmp	.+354    	; 0xbc6 <__fp_inf>
 a64:	fb c0       	rjmp	.+502    	; 0xc5c <__fp_szero>
 a66:	5f 3f       	cpi	r21, 0xFF	; 255
 a68:	ec f3       	brlt	.-6      	; 0xa64 <__divsf3_pse+0x6a>
 a6a:	98 3e       	cpi	r25, 0xE8	; 232
 a6c:	dc f3       	brlt	.-10     	; 0xa64 <__divsf3_pse+0x6a>
 a6e:	86 95       	lsr	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	b7 95       	ror	r27
 a76:	f7 95       	ror	r31
 a78:	9f 5f       	subi	r25, 0xFF	; 255
 a7a:	c9 f7       	brne	.-14     	; 0xa6e <__divsf3_pse+0x74>
 a7c:	88 0f       	add	r24, r24
 a7e:	91 1d       	adc	r25, r1
 a80:	96 95       	lsr	r25
 a82:	87 95       	ror	r24
 a84:	97 f9       	bld	r25, 7
 a86:	08 95       	ret
 a88:	e1 e0       	ldi	r30, 0x01	; 1
 a8a:	66 0f       	add	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	bb 1f       	adc	r27, r27
 a92:	62 17       	cp	r22, r18
 a94:	73 07       	cpc	r23, r19
 a96:	84 07       	cpc	r24, r20
 a98:	ba 07       	cpc	r27, r26
 a9a:	20 f0       	brcs	.+8      	; 0xaa4 <__divsf3_pse+0xaa>
 a9c:	62 1b       	sub	r22, r18
 a9e:	73 0b       	sbc	r23, r19
 aa0:	84 0b       	sbc	r24, r20
 aa2:	ba 0b       	sbc	r27, r26
 aa4:	ee 1f       	adc	r30, r30
 aa6:	88 f7       	brcc	.-30     	; 0xa8a <__divsf3_pse+0x90>
 aa8:	e0 95       	com	r30
 aaa:	08 95       	ret

00000aac <__fixunssfsi>:
 aac:	bc d0       	rcall	.+376    	; 0xc26 <__fp_splitA>
 aae:	88 f0       	brcs	.+34     	; 0xad2 <__fixunssfsi+0x26>
 ab0:	9f 57       	subi	r25, 0x7F	; 127
 ab2:	90 f0       	brcs	.+36     	; 0xad8 <__fixunssfsi+0x2c>
 ab4:	b9 2f       	mov	r27, r25
 ab6:	99 27       	eor	r25, r25
 ab8:	b7 51       	subi	r27, 0x17	; 23
 aba:	a0 f0       	brcs	.+40     	; 0xae4 <__fixunssfsi+0x38>
 abc:	d1 f0       	breq	.+52     	; 0xaf2 <__fixunssfsi+0x46>
 abe:	66 0f       	add	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	1a f0       	brmi	.+6      	; 0xace <__fixunssfsi+0x22>
 ac8:	ba 95       	dec	r27
 aca:	c9 f7       	brne	.-14     	; 0xabe <__fixunssfsi+0x12>
 acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__fixunssfsi+0x46>
 ace:	b1 30       	cpi	r27, 0x01	; 1
 ad0:	81 f0       	breq	.+32     	; 0xaf2 <__fixunssfsi+0x46>
 ad2:	c3 d0       	rcall	.+390    	; 0xc5a <__fp_zero>
 ad4:	b1 e0       	ldi	r27, 0x01	; 1
 ad6:	08 95       	ret
 ad8:	c0 c0       	rjmp	.+384    	; 0xc5a <__fp_zero>
 ada:	67 2f       	mov	r22, r23
 adc:	78 2f       	mov	r23, r24
 ade:	88 27       	eor	r24, r24
 ae0:	b8 5f       	subi	r27, 0xF8	; 248
 ae2:	39 f0       	breq	.+14     	; 0xaf2 <__fixunssfsi+0x46>
 ae4:	b9 3f       	cpi	r27, 0xF9	; 249
 ae6:	cc f3       	brlt	.-14     	; 0xada <__fixunssfsi+0x2e>
 ae8:	86 95       	lsr	r24
 aea:	77 95       	ror	r23
 aec:	67 95       	ror	r22
 aee:	b3 95       	inc	r27
 af0:	d9 f7       	brne	.-10     	; 0xae8 <__fixunssfsi+0x3c>
 af2:	3e f4       	brtc	.+14     	; 0xb02 <__fixunssfsi+0x56>
 af4:	90 95       	com	r25
 af6:	80 95       	com	r24
 af8:	70 95       	com	r23
 afa:	61 95       	neg	r22
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	08 95       	ret

00000b04 <__floatunsisf>:
 b04:	e8 94       	clt
 b06:	09 c0       	rjmp	.+18     	; 0xb1a <__floatsisf+0x12>

00000b08 <__floatsisf>:
 b08:	97 fb       	bst	r25, 7
 b0a:	3e f4       	brtc	.+14     	; 0xb1a <__floatsisf+0x12>
 b0c:	90 95       	com	r25
 b0e:	80 95       	com	r24
 b10:	70 95       	com	r23
 b12:	61 95       	neg	r22
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	99 23       	and	r25, r25
 b1c:	a9 f0       	breq	.+42     	; 0xb48 <__floatsisf+0x40>
 b1e:	f9 2f       	mov	r31, r25
 b20:	96 e9       	ldi	r25, 0x96	; 150
 b22:	bb 27       	eor	r27, r27
 b24:	93 95       	inc	r25
 b26:	f6 95       	lsr	r31
 b28:	87 95       	ror	r24
 b2a:	77 95       	ror	r23
 b2c:	67 95       	ror	r22
 b2e:	b7 95       	ror	r27
 b30:	f1 11       	cpse	r31, r1
 b32:	f8 cf       	rjmp	.-16     	; 0xb24 <__floatsisf+0x1c>
 b34:	fa f4       	brpl	.+62     	; 0xb74 <__floatsisf+0x6c>
 b36:	bb 0f       	add	r27, r27
 b38:	11 f4       	brne	.+4      	; 0xb3e <__floatsisf+0x36>
 b3a:	60 ff       	sbrs	r22, 0
 b3c:	1b c0       	rjmp	.+54     	; 0xb74 <__floatsisf+0x6c>
 b3e:	6f 5f       	subi	r22, 0xFF	; 255
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	8f 4f       	sbci	r24, 0xFF	; 255
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	16 c0       	rjmp	.+44     	; 0xb74 <__floatsisf+0x6c>
 b48:	88 23       	and	r24, r24
 b4a:	11 f0       	breq	.+4      	; 0xb50 <__floatsisf+0x48>
 b4c:	96 e9       	ldi	r25, 0x96	; 150
 b4e:	11 c0       	rjmp	.+34     	; 0xb72 <__floatsisf+0x6a>
 b50:	77 23       	and	r23, r23
 b52:	21 f0       	breq	.+8      	; 0xb5c <__floatsisf+0x54>
 b54:	9e e8       	ldi	r25, 0x8E	; 142
 b56:	87 2f       	mov	r24, r23
 b58:	76 2f       	mov	r23, r22
 b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__floatsisf+0x5e>
 b5c:	66 23       	and	r22, r22
 b5e:	71 f0       	breq	.+28     	; 0xb7c <__floatsisf+0x74>
 b60:	96 e8       	ldi	r25, 0x86	; 134
 b62:	86 2f       	mov	r24, r22
 b64:	70 e0       	ldi	r23, 0x00	; 0
 b66:	60 e0       	ldi	r22, 0x00	; 0
 b68:	2a f0       	brmi	.+10     	; 0xb74 <__floatsisf+0x6c>
 b6a:	9a 95       	dec	r25
 b6c:	66 0f       	add	r22, r22
 b6e:	77 1f       	adc	r23, r23
 b70:	88 1f       	adc	r24, r24
 b72:	da f7       	brpl	.-10     	; 0xb6a <__floatsisf+0x62>
 b74:	88 0f       	add	r24, r24
 b76:	96 95       	lsr	r25
 b78:	87 95       	ror	r24
 b7a:	97 f9       	bld	r25, 7
 b7c:	08 95       	ret

00000b7e <__fp_cmp>:
 b7e:	99 0f       	add	r25, r25
 b80:	00 08       	sbc	r0, r0
 b82:	55 0f       	add	r21, r21
 b84:	aa 0b       	sbc	r26, r26
 b86:	e0 e8       	ldi	r30, 0x80	; 128
 b88:	fe ef       	ldi	r31, 0xFE	; 254
 b8a:	16 16       	cp	r1, r22
 b8c:	17 06       	cpc	r1, r23
 b8e:	e8 07       	cpc	r30, r24
 b90:	f9 07       	cpc	r31, r25
 b92:	c0 f0       	brcs	.+48     	; 0xbc4 <__fp_cmp+0x46>
 b94:	12 16       	cp	r1, r18
 b96:	13 06       	cpc	r1, r19
 b98:	e4 07       	cpc	r30, r20
 b9a:	f5 07       	cpc	r31, r21
 b9c:	98 f0       	brcs	.+38     	; 0xbc4 <__fp_cmp+0x46>
 b9e:	62 1b       	sub	r22, r18
 ba0:	73 0b       	sbc	r23, r19
 ba2:	84 0b       	sbc	r24, r20
 ba4:	95 0b       	sbc	r25, r21
 ba6:	39 f4       	brne	.+14     	; 0xbb6 <__fp_cmp+0x38>
 ba8:	0a 26       	eor	r0, r26
 baa:	61 f0       	breq	.+24     	; 0xbc4 <__fp_cmp+0x46>
 bac:	23 2b       	or	r18, r19
 bae:	24 2b       	or	r18, r20
 bb0:	25 2b       	or	r18, r21
 bb2:	21 f4       	brne	.+8      	; 0xbbc <__fp_cmp+0x3e>
 bb4:	08 95       	ret
 bb6:	0a 26       	eor	r0, r26
 bb8:	09 f4       	brne	.+2      	; 0xbbc <__fp_cmp+0x3e>
 bba:	a1 40       	sbci	r26, 0x01	; 1
 bbc:	a6 95       	lsr	r26
 bbe:	8f ef       	ldi	r24, 0xFF	; 255
 bc0:	81 1d       	adc	r24, r1
 bc2:	81 1d       	adc	r24, r1
 bc4:	08 95       	ret

00000bc6 <__fp_inf>:
 bc6:	97 f9       	bld	r25, 7
 bc8:	9f 67       	ori	r25, 0x7F	; 127
 bca:	80 e8       	ldi	r24, 0x80	; 128
 bcc:	70 e0       	ldi	r23, 0x00	; 0
 bce:	60 e0       	ldi	r22, 0x00	; 0
 bd0:	08 95       	ret

00000bd2 <__fp_nan>:
 bd2:	9f ef       	ldi	r25, 0xFF	; 255
 bd4:	80 ec       	ldi	r24, 0xC0	; 192
 bd6:	08 95       	ret

00000bd8 <__fp_pscA>:
 bd8:	00 24       	eor	r0, r0
 bda:	0a 94       	dec	r0
 bdc:	16 16       	cp	r1, r22
 bde:	17 06       	cpc	r1, r23
 be0:	18 06       	cpc	r1, r24
 be2:	09 06       	cpc	r0, r25
 be4:	08 95       	ret

00000be6 <__fp_pscB>:
 be6:	00 24       	eor	r0, r0
 be8:	0a 94       	dec	r0
 bea:	12 16       	cp	r1, r18
 bec:	13 06       	cpc	r1, r19
 bee:	14 06       	cpc	r1, r20
 bf0:	05 06       	cpc	r0, r21
 bf2:	08 95       	ret

00000bf4 <__fp_round>:
 bf4:	09 2e       	mov	r0, r25
 bf6:	03 94       	inc	r0
 bf8:	00 0c       	add	r0, r0
 bfa:	11 f4       	brne	.+4      	; 0xc00 <__fp_round+0xc>
 bfc:	88 23       	and	r24, r24
 bfe:	52 f0       	brmi	.+20     	; 0xc14 <__fp_round+0x20>
 c00:	bb 0f       	add	r27, r27
 c02:	40 f4       	brcc	.+16     	; 0xc14 <__fp_round+0x20>
 c04:	bf 2b       	or	r27, r31
 c06:	11 f4       	brne	.+4      	; 0xc0c <__fp_round+0x18>
 c08:	60 ff       	sbrs	r22, 0
 c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__fp_round+0x20>
 c0c:	6f 5f       	subi	r22, 0xFF	; 255
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255
 c10:	8f 4f       	sbci	r24, 0xFF	; 255
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	08 95       	ret

00000c16 <__fp_split3>:
 c16:	57 fd       	sbrc	r21, 7
 c18:	90 58       	subi	r25, 0x80	; 128
 c1a:	44 0f       	add	r20, r20
 c1c:	55 1f       	adc	r21, r21
 c1e:	59 f0       	breq	.+22     	; 0xc36 <__fp_splitA+0x10>
 c20:	5f 3f       	cpi	r21, 0xFF	; 255
 c22:	71 f0       	breq	.+28     	; 0xc40 <__fp_splitA+0x1a>
 c24:	47 95       	ror	r20

00000c26 <__fp_splitA>:
 c26:	88 0f       	add	r24, r24
 c28:	97 fb       	bst	r25, 7
 c2a:	99 1f       	adc	r25, r25
 c2c:	61 f0       	breq	.+24     	; 0xc46 <__fp_splitA+0x20>
 c2e:	9f 3f       	cpi	r25, 0xFF	; 255
 c30:	79 f0       	breq	.+30     	; 0xc50 <__fp_splitA+0x2a>
 c32:	87 95       	ror	r24
 c34:	08 95       	ret
 c36:	12 16       	cp	r1, r18
 c38:	13 06       	cpc	r1, r19
 c3a:	14 06       	cpc	r1, r20
 c3c:	55 1f       	adc	r21, r21
 c3e:	f2 cf       	rjmp	.-28     	; 0xc24 <__fp_split3+0xe>
 c40:	46 95       	lsr	r20
 c42:	f1 df       	rcall	.-30     	; 0xc26 <__fp_splitA>
 c44:	08 c0       	rjmp	.+16     	; 0xc56 <__fp_splitA+0x30>
 c46:	16 16       	cp	r1, r22
 c48:	17 06       	cpc	r1, r23
 c4a:	18 06       	cpc	r1, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	f1 cf       	rjmp	.-30     	; 0xc32 <__fp_splitA+0xc>
 c50:	86 95       	lsr	r24
 c52:	71 05       	cpc	r23, r1
 c54:	61 05       	cpc	r22, r1
 c56:	08 94       	sec
 c58:	08 95       	ret

00000c5a <__fp_zero>:
 c5a:	e8 94       	clt

00000c5c <__fp_szero>:
 c5c:	bb 27       	eor	r27, r27
 c5e:	66 27       	eor	r22, r22
 c60:	77 27       	eor	r23, r23
 c62:	cb 01       	movw	r24, r22
 c64:	97 f9       	bld	r25, 7
 c66:	08 95       	ret

00000c68 <__gesf2>:
 c68:	8a df       	rcall	.-236    	; 0xb7e <__fp_cmp>
 c6a:	08 f4       	brcc	.+2      	; 0xc6e <__gesf2+0x6>
 c6c:	8f ef       	ldi	r24, 0xFF	; 255
 c6e:	08 95       	ret

00000c70 <__mulsf3>:
 c70:	0b d0       	rcall	.+22     	; 0xc88 <__mulsf3x>
 c72:	c0 cf       	rjmp	.-128    	; 0xbf4 <__fp_round>
 c74:	b1 df       	rcall	.-158    	; 0xbd8 <__fp_pscA>
 c76:	28 f0       	brcs	.+10     	; 0xc82 <__mulsf3+0x12>
 c78:	b6 df       	rcall	.-148    	; 0xbe6 <__fp_pscB>
 c7a:	18 f0       	brcs	.+6      	; 0xc82 <__mulsf3+0x12>
 c7c:	95 23       	and	r25, r21
 c7e:	09 f0       	breq	.+2      	; 0xc82 <__mulsf3+0x12>
 c80:	a2 cf       	rjmp	.-188    	; 0xbc6 <__fp_inf>
 c82:	a7 cf       	rjmp	.-178    	; 0xbd2 <__fp_nan>
 c84:	11 24       	eor	r1, r1
 c86:	ea cf       	rjmp	.-44     	; 0xc5c <__fp_szero>

00000c88 <__mulsf3x>:
 c88:	c6 df       	rcall	.-116    	; 0xc16 <__fp_split3>
 c8a:	a0 f3       	brcs	.-24     	; 0xc74 <__mulsf3+0x4>

00000c8c <__mulsf3_pse>:
 c8c:	95 9f       	mul	r25, r21
 c8e:	d1 f3       	breq	.-12     	; 0xc84 <__mulsf3+0x14>
 c90:	95 0f       	add	r25, r21
 c92:	50 e0       	ldi	r21, 0x00	; 0
 c94:	55 1f       	adc	r21, r21
 c96:	62 9f       	mul	r22, r18
 c98:	f0 01       	movw	r30, r0
 c9a:	72 9f       	mul	r23, r18
 c9c:	bb 27       	eor	r27, r27
 c9e:	f0 0d       	add	r31, r0
 ca0:	b1 1d       	adc	r27, r1
 ca2:	63 9f       	mul	r22, r19
 ca4:	aa 27       	eor	r26, r26
 ca6:	f0 0d       	add	r31, r0
 ca8:	b1 1d       	adc	r27, r1
 caa:	aa 1f       	adc	r26, r26
 cac:	64 9f       	mul	r22, r20
 cae:	66 27       	eor	r22, r22
 cb0:	b0 0d       	add	r27, r0
 cb2:	a1 1d       	adc	r26, r1
 cb4:	66 1f       	adc	r22, r22
 cb6:	82 9f       	mul	r24, r18
 cb8:	22 27       	eor	r18, r18
 cba:	b0 0d       	add	r27, r0
 cbc:	a1 1d       	adc	r26, r1
 cbe:	62 1f       	adc	r22, r18
 cc0:	73 9f       	mul	r23, r19
 cc2:	b0 0d       	add	r27, r0
 cc4:	a1 1d       	adc	r26, r1
 cc6:	62 1f       	adc	r22, r18
 cc8:	83 9f       	mul	r24, r19
 cca:	a0 0d       	add	r26, r0
 ccc:	61 1d       	adc	r22, r1
 cce:	22 1f       	adc	r18, r18
 cd0:	74 9f       	mul	r23, r20
 cd2:	33 27       	eor	r19, r19
 cd4:	a0 0d       	add	r26, r0
 cd6:	61 1d       	adc	r22, r1
 cd8:	23 1f       	adc	r18, r19
 cda:	84 9f       	mul	r24, r20
 cdc:	60 0d       	add	r22, r0
 cde:	21 1d       	adc	r18, r1
 ce0:	82 2f       	mov	r24, r18
 ce2:	76 2f       	mov	r23, r22
 ce4:	6a 2f       	mov	r22, r26
 ce6:	11 24       	eor	r1, r1
 ce8:	9f 57       	subi	r25, 0x7F	; 127
 cea:	50 40       	sbci	r21, 0x00	; 0
 cec:	8a f0       	brmi	.+34     	; 0xd10 <__mulsf3_pse+0x84>
 cee:	e1 f0       	breq	.+56     	; 0xd28 <__mulsf3_pse+0x9c>
 cf0:	88 23       	and	r24, r24
 cf2:	4a f0       	brmi	.+18     	; 0xd06 <__mulsf3_pse+0x7a>
 cf4:	ee 0f       	add	r30, r30
 cf6:	ff 1f       	adc	r31, r31
 cf8:	bb 1f       	adc	r27, r27
 cfa:	66 1f       	adc	r22, r22
 cfc:	77 1f       	adc	r23, r23
 cfe:	88 1f       	adc	r24, r24
 d00:	91 50       	subi	r25, 0x01	; 1
 d02:	50 40       	sbci	r21, 0x00	; 0
 d04:	a9 f7       	brne	.-22     	; 0xcf0 <__mulsf3_pse+0x64>
 d06:	9e 3f       	cpi	r25, 0xFE	; 254
 d08:	51 05       	cpc	r21, r1
 d0a:	70 f0       	brcs	.+28     	; 0xd28 <__mulsf3_pse+0x9c>
 d0c:	5c cf       	rjmp	.-328    	; 0xbc6 <__fp_inf>
 d0e:	a6 cf       	rjmp	.-180    	; 0xc5c <__fp_szero>
 d10:	5f 3f       	cpi	r21, 0xFF	; 255
 d12:	ec f3       	brlt	.-6      	; 0xd0e <__mulsf3_pse+0x82>
 d14:	98 3e       	cpi	r25, 0xE8	; 232
 d16:	dc f3       	brlt	.-10     	; 0xd0e <__mulsf3_pse+0x82>
 d18:	86 95       	lsr	r24
 d1a:	77 95       	ror	r23
 d1c:	67 95       	ror	r22
 d1e:	b7 95       	ror	r27
 d20:	f7 95       	ror	r31
 d22:	e7 95       	ror	r30
 d24:	9f 5f       	subi	r25, 0xFF	; 255
 d26:	c1 f7       	brne	.-16     	; 0xd18 <__mulsf3_pse+0x8c>
 d28:	fe 2b       	or	r31, r30
 d2a:	88 0f       	add	r24, r24
 d2c:	91 1d       	adc	r25, r1
 d2e:	96 95       	lsr	r25
 d30:	87 95       	ror	r24
 d32:	97 f9       	bld	r25, 7
 d34:	08 95       	ret

00000d36 <_exit>:
 d36:	f8 94       	cli

00000d38 <__stop_program>:
 d38:	ff cf       	rjmp	.-2      	; 0xd38 <__stop_program>
